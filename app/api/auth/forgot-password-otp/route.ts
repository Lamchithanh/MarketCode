import { NextRequest, NextResponse } from 'next/server';
import { supabaseServiceRole } from '@/lib/supabase-server';
import { EmailService } from '@/lib/email-service';
import crypto from 'crypto';
import { z } from 'zod';

const forgotPasswordSchema = z.object({
  email: z.string().email('Email kh√¥ng h·ª£p l·ªá'),
});

// T·∫°o OTP 6 s·ªë
function generateOTP(): string {
  return crypto.randomInt(100000, 999999).toString();
}

// T·∫°o security log
async function logSecurityEvent(data: {
  userId?: string;
  action: string;
  details: Record<string, unknown>;
}) {
  try {
    await supabaseServiceRole
      .from('SecurityLog')
      .insert({
        userId: data.userId || null,
        action: data.action,
        details: data.details,
        createdAt: new Date().toISOString()
      });
  } catch (error) {
    console.error('Failed to log security event:', error);
  }
}

// Get client IP
function getClientIP(request: NextRequest): string {
  const forwarded = request.headers.get('x-forwarded-for');
  if (forwarded) {
    return forwarded.split(',')[0].trim();
  }
  const realIp = request.headers.get('x-real-ip');
  if (realIp) {
    return realIp;
  }
  return 'unknown';
}

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  console.log('üîê OTP Forgot password request started');
  
  try {
    const body = await request.json();
    const { email } = forgotPasswordSchema.parse(body);
    console.log(`üìß Processing OTP forgot password for: ${email}`);

    // T√¨m user v·ªõi email
    console.log('üîç Looking up user...');
    const userStartTime = Date.now();
    const { data: user, error: userError } = await supabaseServiceRole
      .from('User')
      .select('id, email, name, twoFactorEnabled, isActive')
      .eq('email', email)
      .single();
    console.log(`üîç User lookup took: ${Date.now() - userStartTime}ms`);

    if (userError || !user) {
      // Lu√¥n tr·∫£ v·ªÅ success ƒë·ªÉ tr√°nh email enumeration attack
      console.log('‚ùå User not found, but returning success for security');
      return NextResponse.json({
        success: true,
        message: 'N·∫øu email t·ªìn t·∫°i, m√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn h·ªôp th∆∞ c·ªßa b·∫°n.'
      });
    }

    // Kh√¥ng cho ph√©p reset password cho t√†i kho·∫£n kh√¥ng active
    if (!user.isActive) {
      console.log('‚ùå User not active, but returning success for security');
      return NextResponse.json({
        success: true,
        message: 'N·∫øu email t·ªìn t·∫°i, m√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn h·ªôp th∆∞ c·ªßa b·∫°n.'
      });
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ OTP ch∆∞a ƒë·ªÉ tr√°nh spam
    const { data: existingOTP } = await supabaseServiceRole
      .from('VerificationCode')
      .select('*')
      .eq('email', email)
      .eq('type', 'PASSWORD_RESET')
      .gte('expiresAt', new Date().toISOString())
      .single();

    if (existingOTP) {
      console.log('‚ö†Ô∏è OTP already exists and still valid');
      return NextResponse.json({
        success: true,
        message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥, vui l√≤ng ki·ªÉm tra email ho·∫∑c ch·ªù 5 ph√∫t ƒë·ªÉ g·ª≠i l·∫°i.'
      });
    }

    // T·∫°o OTP m·ªõi
    const otp = generateOTP();
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

    console.log('üìù Creating new OTP...');
    const otpStartTime = Date.now();
    
    // X√≥a OTP c≈© (n·∫øu c√≥) v√† t·∫°o m·ªõi
    await supabaseServiceRole
      .from('VerificationCode')
      .delete()
      .eq('email', email)
      .eq('type', 'PASSWORD_RESET');

    const { error: otpError } = await supabaseServiceRole
      .from('VerificationCode')
      .insert({
        userId: user.id,
        email: email,
        code: otp,
        type: 'PASSWORD_RESET',
        expiresAt: expiresAt.toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      });

    console.log(`üìù OTP creation took: ${Date.now() - otpStartTime}ms`);

    if (otpError) {
      console.error('Error creating OTP:', otpError);
      throw new Error('Failed to create OTP');
    }

    // G·ª≠i OTP qua email
    console.log('üìß Sending OTP email...');
    const emailStartTime = Date.now();
    
    const emailTemplate = {
      subject: 'M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - MarketCode',
      html: `
        <div style="max-width: 600px; margin: 0 auto; font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;">
          <div style="background: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0; border: 1px solid #e5e7eb;">
            <h1 style="color: #1f2937; margin: 0; font-size: 28px; font-weight: 600;">MarketCode</h1>
            <p style="color: #6b7280; margin: 10px 0 0 0; font-size: 14px;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</p>
          </div>
          
          <div style="background: #ffffff; padding: 40px 30px; border-radius: 0 0 10px 10px; border: 1px solid #e5e7eb; border-top: none;">
            <div style="text-align: center; margin-bottom: 30px;">
              <div style="width: 56px; height: 56px; background: #2563eb; border-radius: 50%; margin: 0 auto 16px; display: flex; align-items: center; justify-content: center;">
                <span style="color: white; font-size: 24px;">üîë</span>
              </div>
              <h2 style="color: #1f2937; margin: 0 0 8px 0; font-size: 20px; font-weight: 600;">Xin ch√†o ${user.name || 'kh√°ch h√†ng'},</h2>
            </div>
            
            <p style="color: #6b7280; line-height: 1.6; margin: 0 0 30px 0; text-align: center;">
              B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP sau ƒë·ªÉ ti·∫øn h√†nh:
            </p>
            
            <div style="background: #f9fafb; border: 2px solid #e5e7eb; border-radius: 10px; padding: 30px; text-align: center; margin: 30px 0;">
              <div style="font-size: 36px; font-weight: bold; color: #2563eb; letter-spacing: 8px; margin: 0; font-family: monospace;">
                ${otp}
              </div>
              <p style="color: #6b7280; margin: 15px 0 0 0; font-size: 14px;">
                M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t
              </p>
            </div>
            
            ${user.twoFactorEnabled ? `
            <div style="background: #fef3c7; border: 1px solid #f59e0b; border-radius: 8px; padding: 20px; margin: 30px 0;">
              <h4 style="color: #92400e; margin: 0 0 10px 0; display: flex; align-items: center;">
                <span style="margin-right: 8px;">üîê</span> B·∫£o m·∫≠t n√¢ng cao
              </h4>
              <p style="color: #92400e; margin: 0; line-height: 1.5;">
                T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·∫≠t x√°c th·ª±c 2 y·∫øu t·ªë. Sau khi nh·∫≠p OTP, b·∫°n s·∫Ω c·∫ßn x√°c th·ª±c 2FA ƒë·ªÉ ho√†n t·∫•t vi·ªác ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.
              </p>
            </div>
            ` : ''}
            
            <div style="margin: 30px 0; padding: 20px; background: #eff6ff; border-radius: 8px; border-left: 4px solid #2563eb;">
              <h4 style="color: #1d4ed8; margin: 0 0 10px 0; display: flex; align-items: center;">
                <span style="margin-right: 8px;">üîí</span> L∆∞u √Ω b·∫£o m·∫≠t
              </h4>
              <ul style="color: #1d4ed8; margin: 0; padding-left: 20px; line-height: 1.6;">
                <li>Kh√¥ng chia s·∫ª m√£ OTP v·ªõi b·∫•t k·ª≥ ai</li>
                <li>M√£ s·∫Ω h·∫øt hi·ªáu l·ª±c sau 5 ph√∫t</li>
                <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y</li>
              </ul>
            </div>
            
            <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
              <p style="color: #9ca3af; font-size: 12px; margin: 0 0 5px 0;">
                MarketCode - N·ªÅn t·∫£ng chia s·∫ª source code
              </p>
              <p style="color: #9ca3af; font-size: 12px; margin: 0;">
                ¬© ${new Date().getFullYear()} MarketCode. All rights reserved.
              </p>
            </div>
          </div>
        </div>
      `,
      text: `
M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: ${otp}

Xin ch√†o ${user.name || 'kh√°ch h√†ng'},

B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n MarketCode.
M√£ OTP: ${otp}
M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.

${user.twoFactorEnabled ? 'L∆∞u √Ω: T√†i kho·∫£n c·ªßa b·∫°n c√≥ b·∫≠t 2FA, b·∫°n s·∫Ω c·∫ßn x√°c th·ª±c th√™m sau khi nh·∫≠p OTP.' : ''}

Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.
N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y.

¬© ${new Date().getFullYear()} MarketCode
      `
    };

    const emailResult = await EmailService.sendEmail(user.email, emailTemplate);
    console.log(`üìß Email send took: ${Date.now() - emailStartTime}ms`);
    
    if (!emailResult.success) {
      console.error('Failed to send OTP email:', emailResult.error);
      throw new Error('Failed to send OTP email');
    }

    // Log security event
    await logSecurityEvent({
      userId: user.id,
      action: 'otp_password_reset_requested',
      details: {
        email: user.email,
        has2FA: user.twoFactorEnabled,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'Unknown',
        otpExpires: expiresAt.toISOString()
      }
    });

    console.log(`üîê Total OTP forgot password took: ${Date.now() - startTime}ms`);

    return NextResponse.json({
      success: true,
      message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.',
      expiresIn: 300 // 5 ph√∫t = 300 gi√¢y
    });

  } catch (error) {
    console.error('OTP Forgot password error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: error.errors[0].message },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau' },
      { status: 500 }
    );
  }
}