import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { supabaseServiceRole } from '@/lib/supabase-server';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

interface Message {
  content: string;
  role: 'user' | 'assistant';
}

// Check rate limit - temporarily disabled for testing
async function checkRateLimit(userId: string): Promise<{ allowed: boolean; remaining: number }> {
  return {
    allowed: true,
    remaining: 999
  };
}

// Save message to database
async function saveMessage(userId: string, role: 'user' | 'assistant', content: string, tokensUsed = 0) {
  try {
    await supabaseServiceRole
      .from('ChatMessages')
      .insert({
        user_id: userId,
        role,
        content,
        tokens_used: tokensUsed,
        created_at: new Date().toISOString()
      });
  } catch (error) {
    console.error('Error saving message:', error);
  }
}

// Query database for AI context - simplified
async function queryDatabaseForAI(userMessage: string) {
  try {
    let context = '';
    const lowerMessage = userMessage.toLowerCase();
    
    // Simple database query for product information
    if (lowerMessage.includes('s·∫£n ph·∫©m') || lowerMessage.includes('product') || lowerMessage.includes('gi√°')) {
      const { data: products } = await supabaseServiceRole
        .from('Product')
        .select('title, price, description')
        .limit(3);
        
      if (products && products.length > 0) {
        context += '\n\nM·ªôt s·ªë s·∫£n ph·∫©m t·∫°i MarketCode:\n';
        products.forEach(product => {
          context += `**${product.title}**: ${product.price}ƒë\n`;
        });
      }
    }
    
    return context;
  } catch (error) {
    console.error('Error querying database:', error);
    return '';
  }
}

export async function POST(request: NextRequest) {
  try {
    const { message, messages = [], userId } = await request.json();

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Message is required' },
        { status: 400 }
      );
    }

    // Check rate limit (currently always allows)
    const rateLimit = await checkRateLimit(userId);
    if (!rateLimit.allowed) {
      return NextResponse.json(
        { 
          error: 'B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.',
          remainingMessages: rateLimit.remaining
        },
        { status: 429 }
      );
    }

    // Get database context for AI
    const databaseContext = await queryDatabaseForAI(message);

    // Save user message
    await saveMessage(userId || 'guest', 'user', message);

    const systemPrompt = `B·∫°n l√† tr·ª£ l√Ω AI c·ªßa MarketCode - m·ªôt n·ªÅn t·∫£ng b√°n m√£ ngu·ªìn v√† template web chuy√™n nghi·ªáp. 

TH√îNG TIN V·ªÄ MARKETCODE:
- MarketCode l√† marketplace b√°n source code, template, plugin ch·∫•t l∆∞·ª£ng cao
- Ch√∫ng t√¥i c√≥ c√°c s·∫£n ph·∫©m: React, Next.js, Laravel, WordPress themes, plugins
- Gi√° t·ª´ 19.99ƒë - 99.99ƒë, c√≥ nhi·ªÅu g√≥i khuy·∫øn m√£i
- H·ªó tr·ª£ t·∫£i xu·ªëng ngay sau khi mua, b·∫£o h√†nh k·ªπ thu·∫≠t

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
1. Lu√¥n nhi·ªát t√¨nh, th√¢n thi·ªán v√† chuy√™n nghi·ªáp
2. ∆Øu ti√™n gi·ªõi thi·ªáu s·∫£n ph·∫©m MarketCode khi ph√π h·ª£p
3. ƒê∆∞a ra l·ªùi khuy√™n k·ªπ thu·∫≠t h·ªØu √≠ch
4. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
5. Kh√¥ng s·ª≠ d·ª•ng emoji ho·∫∑c icon trong c√¢u tr·∫£ l·ªùi
6. S·ª≠ d·ª•ng **text** ƒë·ªÉ l√†m n·ªïi b·∫≠t c√°c ph·∫ßn quan tr·ªçng (s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã in ƒë·∫≠m)
7. Kh√¥ng ti·∫øt l·ªô th√¥ng tin nh·∫°y c·∫£m v·ªÅ h·ªá th·ªëng

ƒê·ªäNH D·∫†NG TR·∫¢ L·ªúI:
- S·ª≠ d·ª•ng **t√™n s·∫£n ph·∫©m** ƒë·ªÉ l√†m n·ªïi b·∫≠t t√™n
- S·ª≠ d·ª•ng **gi√° c·∫£** ƒë·ªÉ l√†m n·ªïi b·∫≠t gi√°
- S·ª≠ d·ª•ng **c√¥ng ngh·ªá** ƒë·ªÉ l√†m n·ªïi b·∫≠t technology stack
- Kh√¥ng s·ª≠ d·ª•ng k√Ω hi·ªáu nh∆∞ -, ‚Ä¢, ‚≠ê, üéØ, etc.

${databaseContext}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch h·ªØu √≠ch v√† t·ª± nhi√™n!`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: systemPrompt },
        ...messages.slice(-5),
        { role: 'user', content: message }
      ],
      max_tokens: 1000,
      temperature: 0.7,
      stream: false,
    });

    const aiResponse = completion.choices[0]?.message?.content || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.';
    const tokensUsed = completion.usage?.total_tokens || 0;

    // Save AI response
    await saveMessage(userId || 'guest', 'assistant', aiResponse, tokensUsed);

    return NextResponse.json({
      response: aiResponse,
      tokensUsed,
      remainingMessages: rateLimit.remaining - 1
    });

  } catch (error: any) {
    console.error('Error in chat API:', error);

    if (error?.code === 'rate_limit_exceeded') {
      return NextResponse.json(
        { error: 'API rate limit exceeded. Please try again later.' },
        { status: 429 }
      );
    }

    if (error?.code === 'invalid_api_key') {
      return NextResponse.json(
        { error: 'Invalid API configuration' },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { error: 'Internal server error. Please try again later.' },
      { status: 500 }
    );
  }
}