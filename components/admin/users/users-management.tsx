'use client';

import { useState, useEffect } from 'react';
import { RefreshCw } from 'lucide-react';
import { UsersHeader } from './users-header';
import { UsersStats } from './users-stats';
import { UsersSearch } from './users-search';
import { UsersDataTable } from './users-data-table';
import { UserViewDialog } from './user-view-dialog';
import { UserFormDialog } from './user-form-dialog';
import { UserDeleteDialog } from './user-delete-dialog';

interface User {
  id: string;
  name: string;
  email: string;
  role: 'USER' | 'ADMIN';
  avatar?: string;
  isActive: boolean;
  lastLoginAt?: string;
  emailVerified?: string;
  createdAt: string;
}

const mockUsers: User[] = [
  {
    id: '1',
    name: 'John Doe',
    email: 'john@example.com',
    role: 'USER',
    avatar: 'https://github.com/shadcn.png',
    isActive: true,
    lastLoginAt: '2024-01-15T10:30:00Z',
    emailVerified: '2024-01-10T09:00:00Z',
    createdAt: '2024-01-01T00:00:00Z',
  },
  {
    id: '2',
    name: 'Jane Smith',
    email: 'jane@example.com',
    role: 'ADMIN',
    avatar: 'https://github.com/shadcn.png',
    isActive: true,
    lastLoginAt: '2024-01-15T11:45:00Z',
    emailVerified: '2024-01-05T14:30:00Z',
    createdAt: '2024-01-02T00:00:00Z',
  },
  {
    id: '3',
    name: 'Bob Johnson',
    email: 'bob@example.com',
    role: 'USER',
    avatar: 'https://github.com/shadcn.png',
    isActive: false,
    lastLoginAt: '2024-01-10T16:20:00Z',
    emailVerified: '2024-01-08T10:15:00Z',
    createdAt: '2024-01-03T00:00:00Z',
  },
  {
    id: '4',
    name: 'Alice Wilson',
    email: 'alice@example.com',
    role: 'USER',
    avatar: 'https://github.com/shadcn.png',
    isActive: true,
    lastLoginAt: '2024-01-14T09:15:00Z',
    emailVerified: '2024-01-12T08:30:00Z',
    createdAt: '2024-01-04T00:00:00Z',
  },
  {
    id: '5',
    name: 'Charlie Brown',
    email: 'charlie@example.com',
    role: 'ADMIN',
    avatar: 'https://github.com/shadcn.png',
    isActive: true,
    lastLoginAt: '2024-01-15T14:20:00Z',
    emailVerified: '2024-01-06T16:45:00Z',
    createdAt: '2024-01-05T00:00:00Z',
  },
];

export function UsersManagement() {
  const [users, setUsers] = useState<User[]>(mockUsers);
  const [filteredUsers, setFilteredUsers] = useState<User[]>(mockUsers);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);

  // Filter users based on search term
  useEffect(() => {
    const filtered = users.filter(user =>
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredUsers(filtered);
  }, [users, searchTerm]);

  const handleRefresh = async () => {
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      // In real app, this would fetch fresh data
      setLastUpdated(new Date());
    } catch (error) {
      console.error('Error refreshing users:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddUser = () => {
    setSelectedUser(null); // null = Add mode
    setIsFormDialogOpen(true);
  };

  const handleEditUser = (user: User) => {
    setSelectedUser(user); // user = Edit mode
    setIsFormDialogOpen(true);
  };

  const handleDeleteUser = (user: User) => {
    setSelectedUser(user);
    setIsDeleteDialogOpen(true);
  };

  const handleViewUser = (user: User) => {
    setSelectedUser(user);
    setIsViewDialogOpen(true);
  };

  const handleSaveUser = (userData: any) => {
    if (userData.id) {
      // Edit mode - update existing user
      setUsers(users.map(u => u.id === userData.id ? { ...u, ...userData } : u));
    } else {
      // Add mode - create new user
      const newUser: User = {
        id: Date.now().toString(), // In real app, this would be generated by backend
        name: userData.name,
        email: userData.email,
        role: userData.role,
        avatar: userData.avatar,
        isActive: userData.isActive,
        createdAt: new Date().toISOString(),
      };
      setUsers([...users, newUser]);
    }
    setSelectedUser(null);
  };

  const handleConfirmDelete = (userToDelete: User) => {
    setUsers(users.filter(u => u.id !== userToDelete.id));
    setSelectedUser(null);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <UsersHeader onAddUser={handleAddUser} />

      {/* Stats Cards */}
      <UsersStats users={users} />

      {/* Search and Filters */}
      <UsersSearch
        searchTerm={searchTerm}
        onSearchChange={setSearchTerm}
        onRefresh={handleRefresh}
        loading={loading}
      />

      {/* Users Table */}
      <UsersDataTable
        users={filteredUsers}
        onEditUser={handleEditUser}
        onDeleteUser={handleDeleteUser}
        onViewUser={handleViewUser}
      />

      {/* View User Dialog */}
      <UserViewDialog
        open={isViewDialogOpen}
        onOpenChange={setIsViewDialogOpen}
        user={selectedUser}
      />

      {/* User Form Dialog (Add/Edit) */}
      <UserFormDialog
        open={isFormDialogOpen}
        onOpenChange={setIsFormDialogOpen}
        user={selectedUser}
        onSave={handleSaveUser}
      />

      {/* Delete User Dialog */}
      <UserDeleteDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
        user={selectedUser}
        onConfirm={handleConfirmDelete}
      />
    </div>
  );
}
